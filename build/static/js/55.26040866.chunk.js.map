{"version":3,"file":"static/js/55.26040866.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","inline_style_parser_1","__importDefault","require","iterator","styleObject","default","hasIterator","forEach","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","index","assign","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","toUpperCase","hastToReact","StyleToObject","pointEnd","point","pointStart","undefined","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","unicodePunctuation","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","parse","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","_len","_key","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","concat","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign"],"sourceRoot":""}