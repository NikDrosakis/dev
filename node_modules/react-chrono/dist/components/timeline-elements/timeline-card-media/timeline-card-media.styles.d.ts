/// <reference types="react" />
/// <reference types="react" />
import { Theme } from '@models/Theme';
import { TimelineMode } from '@models/TimelineModel';
export declare const linearGradient: import("styled-components").RuleSet<object>;
export declare const MediaWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $active?: boolean;
    $cardHeight?: number;
    $slideShowActive?: boolean;
    $textOverlay?: boolean;
    align?: 'left' | 'right' | 'center';
    dir?: string;
    mode?: TimelineMode;
    theme?: Theme;
}>>;
export declare const CardImage: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, {
    $enableBorderRadius?: boolean;
    $visible?: boolean;
    dir?: string;
    fit?: string;
    mode?: TimelineMode;
}>>;
export declare const CardVideo: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>, {
    height?: number;
}>>;
export declare const MediaDetailsWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $absolutePosition?: boolean;
    $borderLessCard?: boolean;
    $expandFull?: boolean;
    $expandable?: boolean;
    $gradientColor?: string | null;
    $showText?: boolean;
    $textInMedia?: boolean;
    mode?: TimelineMode;
    theme?: Theme;
}>>;
export declare const ErrorMessage: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLSpanElement>;
    key?: import("react").Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onFocus?: import("react").FocusEventHandler<HTMLSpanElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLSpanElement>;
    onBlur?: import("react").FocusEventHandler<HTMLSpanElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLSpanElement>;
    onChange?: import("react").FormEventHandler<HTMLSpanElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLSpanElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onInput?: import("react").FormEventHandler<HTMLSpanElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onReset?: import("react").FormEventHandler<HTMLSpanElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onSubmit?: import("react").FormEventHandler<HTMLSpanElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onInvalid?: import("react").FormEventHandler<HTMLSpanElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onLoad?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onError?: import("react").ReactEventHandler<HTMLSpanElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onAbort?: import("react").ReactEventHandler<HTMLSpanElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEnded?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPause?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlay?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onProgress?: import("react").ReactEventHandler<HTMLSpanElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onResize?: import("react").ReactEventHandler<HTMLSpanElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onStalled?: import("react").ReactEventHandler<HTMLSpanElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLSpanElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLSpanElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDrag?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragExit?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragOver?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragStart?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDrop?: import("react").DragEventHandler<HTMLSpanElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onSelect?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onScroll?: import("react").UIEventHandler<HTMLSpanElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLSpanElement>;
    onWheel?: import("react").WheelEventHandler<HTMLSpanElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLSpanElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLSpanElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLSpanElement>;
}>;
export declare const IFrameVideo: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLIFrameElement>;
    key?: import("react").Key;
    allow?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    frameBorder?: string | number;
    height?: string | number;
    loading?: "eager" | "lazy";
    marginHeight?: number;
    marginWidth?: number;
    name?: string;
    referrerPolicy?: import("react").HTMLAttributeReferrerPolicy;
    sandbox?: string;
    scrolling?: string;
    seamless?: boolean;
    src?: string;
    srcDoc?: string;
    width?: string | number;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLIFrameElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLIFrameElement>;
    onFocus?: import("react").FocusEventHandler<HTMLIFrameElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLIFrameElement>;
    onBlur?: import("react").FocusEventHandler<HTMLIFrameElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLIFrameElement>;
    onChange?: import("react").FormEventHandler<HTMLIFrameElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLIFrameElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onInput?: import("react").FormEventHandler<HTMLIFrameElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onReset?: import("react").FormEventHandler<HTMLIFrameElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onSubmit?: import("react").FormEventHandler<HTMLIFrameElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onInvalid?: import("react").FormEventHandler<HTMLIFrameElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLIFrameElement>;
    onLoad?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onError?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLIFrameElement>;
    onAbort?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEnded?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPause?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPlay?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onProgress?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onResize?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onStalled?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onClick?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onDrag?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragExit?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragOver?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragStart?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDrop?: import("react").DragEventHandler<HTMLIFrameElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLIFrameElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLIFrameElement>;
    onSelect?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLIFrameElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLIFrameElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLIFrameElement>;
    onScroll?: import("react").UIEventHandler<HTMLIFrameElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLIFrameElement>;
    onWheel?: import("react").WheelEventHandler<HTMLIFrameElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLIFrameElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLIFrameElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLIFrameElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLIFrameElement>;
}>;
export declare const DetailsTextWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $expandFull?: boolean;
    $show?: boolean;
    background: string;
    theme?: Theme;
}>>;
export declare const CardMediaHeader: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLDivElement>;
    key?: import("react").Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onResize?: import("react").ReactEventHandler<HTMLDivElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDrag?: import("react").DragEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStart?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
}>;
export declare const ImageWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    height?: number;
}>>;
