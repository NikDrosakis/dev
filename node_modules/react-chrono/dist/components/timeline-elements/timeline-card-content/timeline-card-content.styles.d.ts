/// <reference types="react" />
/// <reference types="react" />
import { Theme } from '@models/Theme';
import { TimelineProps } from '@models/TimelineModel';
type ContentT = Pick<TimelineProps, 'theme' | 'slideShow' | 'mode' | 'borderLessCards'>;
export declare const TimelineItemContentWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, {
    $active?: boolean;
    $borderLessCards?: TimelineProps['borderLessCards'];
    $branchDir?: string;
    $isNested?: boolean;
    $maxWidth?: number;
    $minHeight?: number;
    $noMedia?: boolean;
    $slideShow?: TimelineProps['slideShow'];
    $slideShowActive?: boolean;
    $slideShowType?: TimelineProps['slideShowType'];
    $textOverlay?: boolean;
} & ContentT>>;
export declare const TimelineCardHeader: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLElement>;
    key?: import("react").Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLElement>;
    onBlur?: import("react").FocusEventHandler<HTMLElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLElement>;
    onChange?: import("react").FormEventHandler<HTMLElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onInput?: import("react").FormEventHandler<HTMLElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onReset?: import("react").FormEventHandler<HTMLElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLElement>;
    onSubmit?: import("react").FormEventHandler<HTMLElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLElement>;
    onInvalid?: import("react").FormEventHandler<HTMLElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLElement>;
    onLoad?: import("react").ReactEventHandler<HTMLElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLElement>;
    onError?: import("react").ReactEventHandler<HTMLElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onAbort?: import("react").ReactEventHandler<HTMLElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEnded?: import("react").ReactEventHandler<HTMLElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPause?: import("react").ReactEventHandler<HTMLElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlay?: import("react").ReactEventHandler<HTMLElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onProgress?: import("react").ReactEventHandler<HTMLElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onResize?: import("react").ReactEventHandler<HTMLElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onStalled?: import("react").ReactEventHandler<HTMLElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDrag?: import("react").DragEventHandler<HTMLElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragExit?: import("react").DragEventHandler<HTMLElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragOver?: import("react").DragEventHandler<HTMLElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragStart?: import("react").DragEventHandler<HTMLElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLElement>;
    onDrop?: import("react").DragEventHandler<HTMLElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLElement>;
    onSelect?: import("react").ReactEventHandler<HTMLElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onScroll?: import("react").UIEventHandler<HTMLElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLElement>;
    onWheel?: import("react").WheelEventHandler<HTMLElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLElement>;
}>;
export declare const CardSubTitle: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, {
    $fontSize?: string;
    $padding?: boolean;
    dir?: string;
    theme?: Theme;
}>>;
export declare const CardTitle: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, {
    $fontSize: string;
    $padding?: boolean;
    dir?: string;
    theme: Theme;
}>>;
export declare const CardTitleAnchor: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLAnchorElement>;
    key?: import("react").Key;
    download?: any;
    href?: string;
    hrefLang?: string;
    media?: string;
    ping?: string;
    target?: import("react").HTMLAttributeAnchorTarget;
    type?: string;
    referrerPolicy?: import("react").HTMLAttributeReferrerPolicy;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onFocus?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onBlur?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onChange?: import("react").FormEventHandler<HTMLAnchorElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLAnchorElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInput?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onReset?: import("react").FormEventHandler<HTMLAnchorElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onSubmit?: import("react").FormEventHandler<HTMLAnchorElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInvalid?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onLoad?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onError?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onAbort?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEnded?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPause?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlay?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onProgress?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onResize?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onStalled?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDrag?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragExit?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragOver?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragStart?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDrop?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onSelect?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onScroll?: import("react").UIEventHandler<HTMLAnchorElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLAnchorElement>;
    onWheel?: import("react").WheelEventHandler<HTMLAnchorElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLAnchorElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLAnchorElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLAnchorElement>;
}>;
export declare const TimelineContentDetails: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, {
    theme?: Theme;
}>>;
export declare const TimelineSubContent: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    fontSize?: string;
    theme?: Theme;
}>>;
export declare const TimelineContentDetailsWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $borderLess?: boolean;
    $cardHeight?: number | null;
    $contentHeight?: number;
    $customContent?: boolean;
    $gradientColor?: string | null;
    $showMore?: boolean;
    $textOverlay?: boolean;
    $useReadMore?: boolean;
    branchDir?: string;
    height?: number;
    theme?: Theme;
}>>;
export declare const ShowMore: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {
    show?: 'true' | 'false';
    theme?: Theme;
}>>;
export declare const SlideShowProgressBar: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    $color?: string;
    $duration?: number;
    $paused?: boolean;
    $resuming?: boolean;
    $startWidth?: number;
}>>;
export declare const ChevronIconWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    collapsed?: 'true' | 'false';
}>>;
export declare const TriangleIconWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    dir?: string;
    offset?: number;
    theme?: Theme;
}>>;
export {};
