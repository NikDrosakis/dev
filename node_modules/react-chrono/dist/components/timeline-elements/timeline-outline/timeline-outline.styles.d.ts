/// <reference types="react" />
/// <reference types="react" />
import { Theme } from '@models/Theme';
import { OutlinePosition } from './timeline-outline';
export declare const OutlineWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    open?: boolean;
    position?: OutlinePosition;
}>>;
export declare const OutlinePane: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLElement>, HTMLElement>, {
    open?: boolean;
}>>;
export declare const OutlineButton: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {
    open?: boolean;
    position?: OutlinePosition;
    theme?: Theme;
}>>;
export declare const List: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLUListElement>;
    key?: import("react").Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "none" | "list" | "inline" | "both";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "none" | "link" | "copy" | "execute" | "move" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLUListElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLUListElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLUListElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLUListElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLUListElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLUListElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLUListElement>;
    onFocus?: import("react").FocusEventHandler<HTMLUListElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLUListElement>;
    onBlur?: import("react").FocusEventHandler<HTMLUListElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLUListElement>;
    onChange?: import("react").FormEventHandler<HTMLUListElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLUListElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onInput?: import("react").FormEventHandler<HTMLUListElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onReset?: import("react").FormEventHandler<HTMLUListElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onSubmit?: import("react").FormEventHandler<HTMLUListElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onInvalid?: import("react").FormEventHandler<HTMLUListElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLUListElement>;
    onLoad?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onError?: import("react").ReactEventHandler<HTMLUListElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLUListElement>;
    onAbort?: import("react").ReactEventHandler<HTMLUListElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLUListElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLUListElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLUListElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLUListElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLUListElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onEnded?: import("react").ReactEventHandler<HTMLUListElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLUListElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onPause?: import("react").ReactEventHandler<HTMLUListElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onPlay?: import("react").ReactEventHandler<HTMLUListElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLUListElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onProgress?: import("react").ReactEventHandler<HTMLUListElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLUListElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onResize?: import("react").ReactEventHandler<HTMLUListElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLUListElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLUListElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onStalled?: import("react").ReactEventHandler<HTMLUListElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLUListElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLUListElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLUListElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLUListElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLUListElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onClick?: import("react").MouseEventHandler<HTMLUListElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLUListElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLUListElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onDrag?: import("react").DragEventHandler<HTMLUListElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLUListElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLUListElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragExit?: import("react").DragEventHandler<HTMLUListElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLUListElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragOver?: import("react").DragEventHandler<HTMLUListElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDragStart?: import("react").DragEventHandler<HTMLUListElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onDrop?: import("react").DragEventHandler<HTMLUListElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLUListElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLUListElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLUListElement>;
    onSelect?: import("react").ReactEventHandler<HTMLUListElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLUListElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLUListElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLUListElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLUListElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLUListElement>;
    onScroll?: import("react").UIEventHandler<HTMLUListElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLUListElement>;
    onWheel?: import("react").WheelEventHandler<HTMLUListElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLUListElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLUListElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLUListElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLUListElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLUListElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLUListElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLUListElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLUListElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLUListElement>;
}>;
export declare const ListItem: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLLIElement>;
    key?: import("react").Key;
    value?: string | number | readonly string[];
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    placeholder?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: import("react").CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "search" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "none" | "list" | "inline" | "both";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "none" | "link" | "copy" | "execute" | "move" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLIElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLIElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLIElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLIElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLIElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLIElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLIElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLIElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLIElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLIElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLIElement>;
    onChange?: import("react").FormEventHandler<HTMLLIElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLIElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onInput?: import("react").FormEventHandler<HTMLLIElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onReset?: import("react").FormEventHandler<HTMLLIElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLIElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLIElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLIElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onError?: import("react").ReactEventHandler<HTMLLIElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLIElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLIElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLIElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLIElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLIElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLIElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLIElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLIElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLIElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onPause?: import("react").ReactEventHandler<HTMLLIElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLIElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLIElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLIElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLIElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onResize?: import("react").ReactEventHandler<HTMLLIElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLIElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLIElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLIElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLIElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLIElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLIElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLIElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLIElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onClick?: import("react").MouseEventHandler<HTMLLIElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLIElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLIElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onDrag?: import("react").DragEventHandler<HTMLLIElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLLIElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLIElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLIElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLIElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLIElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDragStart?: import("react").DragEventHandler<HTMLLIElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onDrop?: import("react").DragEventHandler<HTMLLIElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLIElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLIElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLIElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLIElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLIElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLIElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLIElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLIElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLIElement>;
    onScroll?: import("react").UIEventHandler<HTMLLIElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLIElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLIElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLIElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLLIElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLIElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLIElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLIElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLIElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLIElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLIElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLIElement>;
}>;
export declare const ListItemName: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    selected?: boolean;
    theme?: Theme;
}>>;
export declare const ListItemBullet: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    selected?: boolean;
    theme?: Theme;
}>>;
